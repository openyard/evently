// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: service.proto

package grpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Customer_OnboardCustomer_FullMethodName    = "/proto.Customer/OnboardCustomer"
	Customer_ActivateCustomer_FullMethodName   = "/proto.Customer/ActivateCustomer"
	Customer_DeactivateCustomer_FullMethodName = "/proto.Customer/DeactivateCustomer"
)

// CustomerClient is the client API for Customer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerClient interface {
	OnboardCustomer(ctx context.Context, in *OnboardingRequest, opts ...grpc.CallOption) (*OnboardingReply, error)
	ActivateCustomer(ctx context.Context, in *ActivationRequest, opts ...grpc.CallOption) (*ActivationReply, error)
	DeactivateCustomer(ctx context.Context, in *DeactivationRequest, opts ...grpc.CallOption) (*DeactivationReply, error)
}

type customerClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerClient(cc grpc.ClientConnInterface) CustomerClient {
	return &customerClient{cc}
}

func (c *customerClient) OnboardCustomer(ctx context.Context, in *OnboardingRequest, opts ...grpc.CallOption) (*OnboardingReply, error) {
	out := new(OnboardingReply)
	err := c.cc.Invoke(ctx, Customer_OnboardCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) ActivateCustomer(ctx context.Context, in *ActivationRequest, opts ...grpc.CallOption) (*ActivationReply, error) {
	out := new(ActivationReply)
	err := c.cc.Invoke(ctx, Customer_ActivateCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) DeactivateCustomer(ctx context.Context, in *DeactivationRequest, opts ...grpc.CallOption) (*DeactivationReply, error) {
	out := new(DeactivationReply)
	err := c.cc.Invoke(ctx, Customer_DeactivateCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServer is the server API for Customer service.
// All implementations must embed UnimplementedCustomerServer
// for forward compatibility
type CustomerServer interface {
	OnboardCustomer(context.Context, *OnboardingRequest) (*OnboardingReply, error)
	ActivateCustomer(context.Context, *ActivationRequest) (*ActivationReply, error)
	DeactivateCustomer(context.Context, *DeactivationRequest) (*DeactivationReply, error)
	mustEmbedUnimplementedCustomerServer()
}

// UnimplementedCustomerServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerServer struct {
}

func (UnimplementedCustomerServer) OnboardCustomer(context.Context, *OnboardingRequest) (*OnboardingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnboardCustomer not implemented")
}
func (UnimplementedCustomerServer) ActivateCustomer(context.Context, *ActivationRequest) (*ActivationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateCustomer not implemented")
}
func (UnimplementedCustomerServer) DeactivateCustomer(context.Context, *DeactivationRequest) (*DeactivationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateCustomer not implemented")
}
func (UnimplementedCustomerServer) mustEmbedUnimplementedCustomerServer() {}

// UnsafeCustomerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServer will
// result in compilation errors.
type UnsafeCustomerServer interface {
	mustEmbedUnimplementedCustomerServer()
}

func RegisterCustomerServer(s grpc.ServiceRegistrar, srv CustomerServer) {
	s.RegisterService(&Customer_ServiceDesc, srv)
}

func _Customer_OnboardCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).OnboardCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customer_OnboardCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).OnboardCustomer(ctx, req.(*OnboardingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_ActivateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).ActivateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customer_ActivateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).ActivateCustomer(ctx, req.(*ActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customer_DeactivateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServer).DeactivateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customer_DeactivateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServer).DeactivateCustomer(ctx, req.(*DeactivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Customer_ServiceDesc is the grpc.ServiceDesc for Customer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Customer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Customer",
	HandlerType: (*CustomerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnboardCustomer",
			Handler:    _Customer_OnboardCustomer_Handler,
		},
		{
			MethodName: "ActivateCustomer",
			Handler:    _Customer_ActivateCustomer_Handler,
		},
		{
			MethodName: "DeactivateCustomer",
			Handler:    _Customer_DeactivateCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
